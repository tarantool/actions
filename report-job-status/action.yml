name: Report failed job to VK Teams chat
description: >
  This action composes a message about the failed job and sends it to
  the specified VK Teams chat

inputs:
  api-url:
    description: Bot API URL
    required: false
    default: 'https://api.internal.myteam.mail.ru/bot/v1/'
  bot-token:
    description: Bot token
    required: true
  chat-id:
    description: Notification chat ID (or stamp from chat URL)
    required: true
  job-steps:
    description: >
      Info about steps in JSON format that have been run in the job.
      It must be always `ToJson(steps)` expression if you provide steps info
    required: false
    default: '{}'
  job-name:
    description: >
      Full job name with matrix combinations. For example, job `test` with
      matrix options `foo='a'` and `bar='b'` will be named `test (a, b)`.
      This is required for finding exact job IDs of matrix jobs.
      These IDs are later used to build direct links to job logs.
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Prepare commit message
      id: prepare-commit-msg
      run: echo "::set-output name=commit-msg::${COMMIT_MSG//'`'/<BACKTICK>}"
      env:
        COMMIT_MSG: |
          ${{ github.event.head_commit.message }}
      shell: bash

    - name: Get job data
      shell: bash
      env:
        CURL_COMMAND: |-
          curl --location \
            --fail \
            --silent \
            --show-error \
            --retry 5 \
            --retry-delay 5
        API_ROOT: >-
          https://api.github.com/repos/${{ github.repository }}/actions/runs
      run: |
        echo 'Fetching job data'
        echo 'JOB_CONTEXT<<EOF' >> $GITHUB_ENV
        ${{ env.CURL_COMMAND }} -H 'authorization: Bearer ${{ github.token }}' \
          ${{ env.API_ROOT }}/${{ github.run_id }}/jobs >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Compose message about job failure
      id: compose-message
      uses: actions/github-script@v6
      with:
        script: |
          const baseUrl = "https://github.com"
          const eventName = "${{ github.event_name }}"
          const eventNumber = "${{ github.event.number }}"
          const failedJobName = "${{ inputs.job-name }}" || "${{ github.job }}"
          const steps = ${{ inputs.job-steps }}
          const jobContext = ${{ env.JOB_CONTEXT }}

          let refName = ""
          let refType = ""
          let refTypeUrlPart = ""
          let failedSteps = ""
          let failedStepsMsg = ""
          let jobId = ""
          let jobIdMsg = ""
          
          if (eventName == "pull_request") {
            refName = "#" + eventNumber
            refType = "pull request"
            refTypeUrlPart = "pull/" + eventNumber
          } else {
            refName = "${{ github.ref_name }}"
            refType = "${{ github.ref_type }}"
            if (refType == "branch") {
              refTypeUrlPart = "tree/" + refName
            } else {
              refTypeUrlPart = "releases/tag/" + refName
            }
          }

          // Commit message must be wrapped into backticks because it can be
          // a multiline.
          commitString = `${{ steps.prepare-commit-msg.outputs.commit-msg }}`
            .split("\n")[0]
            .replaceAll("<BACKTICK>", "`")

          Object.keys(steps).forEach(function(key) {
            if (steps[key]["conclusion"] == "failure") {
              failedSteps += "\n" + String(key) + ": " + 
                JSON.stringify(steps[key])
            }
          })

          // Try to find the job ID by its name.
          // In matrix workflows it will work only if exact name was provided
          // in `job-name` input.
          for (job of jobContext.jobs) {
            if (job.name == failedJobName) {
              jobId = job.id
              break
            }
          } 
          if (jobId != "") {
            jobIdMsg = `<b>Job:</b> <a href="${baseUrl}/${{ github.repository }}/runs/${jobId}?check_suite_focus=true">${failedJobName}</a>, attempt #${{ github.run_attempt }}`
          } else {
            jobIdMsg = `<b>Job:</b> ${failedJobName}, attempt #${{ github.run_attempt }}`
          }

          if (failedSteps != "") {
            failedStepsMsg = "--------------- Failed steps info ---------------"
            failedStepsMsg += failedSteps
          }
          
          let message = `ðŸ”´ FAIL
          ${jobIdMsg}
          <b>Workflow:</b> <a href="${baseUrl}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.workflow }}</a>
          <b>Repo:</b> <a href="${baseUrl}/${{ github.repository }}/">${{ github.repository }}</a>
          <b>${refType[0].toUpperCase()}${refType.slice(1)}</b>: <a href="${baseUrl}/${{ github.repository }}/${refTypeUrlPart}">${refName}</a>
          <b>Commit:</b> <a href="${baseUrl}/${{ github.repository }}/commit/${{ github.sha }}">${{ github.sha }}</a>
          <b>History:</b> <a href="${baseUrl}/${{ github.repository }}/commits/${{ github.sha }}">commits</a>
          <b>Triggered on</b>: ${eventName}
          <b>Committer:</b> <a href="https://github.com/${{ github.actor }}">${{ github.actor }}</a>\
          ${commitString ? `\n<b>Commit message subject:</b> ${commitString}` : ""}
          <code>${failedStepsMsg}</code>`
          return message
        result-encoding: string

    - name: Send message
      uses: dasshit/myteam-notify@1.4
      with:
        api-url: ${{ inputs.api-url }}
        bot-token: ${{ inputs.bot-token }}
        chat-id: ${{ inputs.chat-id }}
        msg-text: ${{ steps.compose-message.outputs.result }}
